#summary Steps to install pypyodbc on Ironpython and enable SQLAlchemy support
#labels Featured

= IronPython running SQLAlchemy with pypyodbc=

With the pure Python ODBC interface library, pypyodbc, by simply extending SQLAlchemy, IronPython also can use SQLAlchemy. There are four steps to do so:

===Install pypyodbc for IronPython===

  * *Step 1:* Direct put the file pypyodbc.py under the IronPython instance's site-packages directory: IronPython 2.7\Lib\site-packages.
  
  Now you can try if "import pypyodbc" can success in IronPython's interactive window.


===Extend SQLAlchemy drivers===
Then we simply extend SQLAlchemy so it can use the pypyodbc library installed in the steps above.

  * *Step 2:* Create a copy of IronPython 2.7\Lib\site-packages\sqlalchemy\connectors\pyodbc.py and rename it to pypyodbc.py, and then replace all "pyodbc" in the new pypyodbc.py to "pypyodbc".

  * *Step 3:* Create a copy of IronPython 2.7\Lib\site-packages\sqlalchemy\dialects\mssql\pyodbc.py and rename it to pypyodbc.py, and then replace all "pyodbc" in the new pypyodbc.py to "pypyodbc".

  * *Step 4:* Modify IronPython 2.7\Lib\site-packages\sqlalchemy\dialects\mssql_init_.py, in the import line, add *pypyodbc* after mxodbc, like this: 

{{{
from sqlalchemy.dialects.mssql import base, pyodbc, adodbapi, \ 
                                       pymssql, zxjdbc, mxodbc, pypyodbc
}}}

Now you can use SQLAlchemy with below code:

engine = create_engine('mssql+*pypyodbc*://mssqlDSN')